# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa
stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish articats
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
          
        - task: TerraformInstaller@0
          displayName: Terraform install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformCLI@0
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            backendType: 'azurerm'
            backendServiceArm: 'terraform-aks-sn'
            backendAzureRmResourceGroupName: 'terraform-storage-rg'
            backendAzureRmStorageAccountName: 'terraformstatexlrwdrzsjj'
            backendAzureRmContainerName: 'tfstatefiles'
            backendAzureRmKey: 'aks-base-tfstate'
            allowTelemetryCollection: false
  - stage: DeployAKSDevCluster
    jobs:  
      - deployment: DeployAKSDevCluster
        displayName: DeployAKSDevCluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
               steps:
                 - task: DownloadSecureFile@1
                   displayName: Download SSH Key
                   name: sshkey
                   inputs:
                     secureFile: 'id_rsa.pub'
                 - task: TerraformCLI@0
                   displayName: Terraform Init
                   inputs:
                     command: 'init'
                     workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                     backendType: 'azurerm'
                     backendServiceArm: 'terraform-aks-sn'
                     backendAzureRmResourceGroupName: 'terraform-storage-rg'
                     backendAzureRmStorageAccountName: 'terraformstatexlrwdrzsjj'
                     backendAzureRmContainerName: 'tfstatefiles'
                     backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                     allowTelemetryCollection: false

                 - task: TerraformCLI@0
                   displayName: Terraform plan
                   inputs:
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'terraform-aks-sn'
                    commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false
                 
                 - task: TerraformCLI@0
                   inputs:
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'terraform-aks-sn'
                    commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false
      
      
